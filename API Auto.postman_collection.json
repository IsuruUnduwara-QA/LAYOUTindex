{
	"info": {
		"_postman_id": "ecebde4c-0341-4b41-91e7-951abdde298e",
		"name": "API Auto",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "14308605"
	},
	"item": [
		{
			"name": "auth",
			"item": [
				{
					"name": "Auth success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"const json = JSON.parse(responseBody);",
									"//tests",
									"",
									"pm.test(\"Response status 200\", () => {",
									"   pm.expect(pm.response.code).to.eql(200);",
									"   ",
									"});",
									"",
									"pm.test(\"Response has token\", () => {",
									"   pm.expect(json).to.have.property('token');",
									"   pm.environment.set('token',json.token)",
									"});",
									"",
									"pm.test(\"Response does not has a reason\", () => {",
									"   pm.expect(json).not.to.have.property('reason');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\" : \"admin\",\n    \"password\" : \"password123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiUrl}}/auth",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Auth Failed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"const json = JSON.parse(responseBody);",
									"//tests",
									"",
									"pm.test(\"Response status 200\", () => {",
									"   pm.expect(pm.response.code).to.eql(200);",
									"   ",
									"});",
									"",
									"pm.test(\"Response has reason\", () => {",
									"   pm.expect(json).to.have.property('reason');",
									"});",
									"",
									"pm.test(\"Response does not contain token\", () => {",
									"   pm.expect(json).not.to.have.property('token');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\" : \"admisn\",\n    \"password\" : \"password123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiUrl}}/auth",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "create booking",
			"item": [
				{
					"name": "create success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"const json = JSON.parse(responseBody);",
									"//tests",
									"",
									"pm.test(\"Response status 200\", () => {",
									"   pm.expect(pm.response.code).to.eql(200);",
									"   ",
									"});",
									"",
									"pm.test(\"Response has all details\", () => {",
									"  const json = pm.response.json();",
									"  const payload = JSON.parse(pm.request.body.raw);",
									"",
									"",
									"    // tests",
									"    pm.expect(json).to.have.property('bookingid');",
									"    pm.expect(json).to.have.property('booking');",
									"",
									"    const booking = json.booking",
									"    ",
									"    pm.expect(payload.firstname).eql(booking.firstname)",
									"    pm.expect(payload.lastname).eql(booking.lastname)",
									"    pm.expect(payload.totalprice).eql(booking.totalprice)",
									"    pm.expect(payload.depositpaid).eql(booking.depositpaid)",
									"    pm.expect(payload.additionalneeds).eql(booking.additionalneeds)",
									"    pm.expect(payload.bookingdates.checkin).eql(booking.bookingdates.checkin)",
									"    pm.expect(payload.bookingdates.checkout).eql(booking.bookingdates.checkout)",
									"",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstname\" : \"Jim\",\n    \"lastname\" : \"Brown\",\n    \"totalprice\" : 111,\n    \"depositpaid\" : true,\n    \"bookingdates\" : {\n        \"checkin\" : \"2018-01-01\",\n        \"checkout\" : \"2019-01-01\"\n    },\n    \"additionalneeds\" : \"Breakfast\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiUrl}}/booking",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				},
				{
					"name": "create with invalid data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"const json = JSON.parse(responseBody);",
									"//tests",
									"",
									"pm.test(\"Response status 200\", () => {",
									"   pm.expect(pm.response.code).to.eql(200);",
									"   ",
									"});",
									"",
									"pm.test(\"When Request body has invalid data\", () => {",
									"  const json = pm.response.json();",
									"  const payload = JSON.parse(pm.request.body.raw);",
									"",
									"    // tests",
									"    pm.expect(json).not.to.have.property('bookingid');",
									"",
									"});",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstname\" : \"\",\n    \"lastname\" : \"\",\n    \"totalprice\" : 111,\n    \"depositpaid\" : true,\n    \"bookingdates\" : {\n        \"checkin\" : \"2018-01-01\",\n        \"checkout\" : \"2019-01-01\"\n    },\n    \"additionalneeds\" : \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiUrl}}/booking",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				},
				{
					"name": "create without body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"",
									"",
									"pm.test(\"Response status 400\", () => {",
									"   pm.expect(pm.response.code).to.eql(400);",
									"});",
									"",
									"pm.test(\"When Request body is undefined\", () => {",
									"",
									"    const json = pm.response.json();",
									"    // tests",
									"    pm.expect(json).not.to.have.property('bookingid');",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{apiUrl}}/booking",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}